__version__ = (1, 0, 1)
# meta developer: @psyhomodules

import aiohttp
from hikkatl.types import Message
from .. import loader, utils

@loader.tds
class ScriptSearch(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è Roblox"""

    strings = {
        "name": "ScriptSearchRbx",
        "loading": "üîç <b>–ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è Roblox...</b>",
        "no_query": "‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –ò–ì–†–´</b>",
        "no_results": "‚ùå <b>–ù–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è</b> <code>{}</code>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{}</code>",
        "results": "üéÆ <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–õ–Ø</b> <code>{}</code>:\n\n{}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "MAX_RESULTS", 5,
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
            
    
    async def format_script_info(self, script: dict) -> str:
        title = script.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        game = script.get("game", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")
        script_code = script.get("script", "‚ö†Ô∏è <b>–°–ö–†–ò–ü–¢ –ù–ï–î–û–°–¢–£–ü–ï–ù</b>")[:1000]

        return (
            f"üìù <b>{title}</b>\n"
            f"üéÆ <code>{game}</code>\n\n"
            f"<b>üìú –°–ö–†–ò–ü–¢:</b>\n<code>{script_code}</code>\n"
        )

    @loader.command()
    async def search(self, message: Message):
        """–ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è Roblox"""
        query = utils.get_args_raw(message)
        if not query:
            await utils.answer(message, self.strings["no_query"])
            return

        await utils.answer(message, self.strings["loading"])

        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://scriptblox.com/api/script/search?q={query}&page=1"
                async with session.get(url) as response:
                    if response.status != 200:
                        await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))
                        return
                    data = await response.json()

                scripts = data.get("result", {}).get("scripts", [])
                if not scripts:
                    await utils.answer(message, self.strings["no_results"].format(query))
                    return

                results = []
                for script in scripts[:self.config["MAX_RESULTS"]]:
                    results.append(await self.format_script_info(script))

                response_text = self.strings["results"].format(query, "\n\n".join(results))
                await utils.answer(message, response_text)

        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
