__version__ = (1, 0, 0)
# meta developer: @psyhomodules

from hikkatl.types import Message
from telethon.tl.functions.channels import JoinChannelRequest
from .. import loader, utils
import asyncio

@loader.tds
class StickSpam(loader.Module):
    """üöÄ –ú–æ–¥—É–ª—å –¥–ª—è —Å–ø–∞–º–∞ —Å—Ç–∏–∫–µ—Ä–∞–º–∏"""

    strings = {
        "name": "StickSpam",
        "spam_started": "‚úàÔ∏è <b>–°–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –Ω–∞—á–∞—Ç!</b>\nüÜî <code>{}</code>",
        "spam_stopped": "üõë <b>–°–ø–∞–º –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
        "invalid_count": "‚ö†Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000!</b>",
        "invalid_interval": "‚ö†Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0!</b>",
        "sticker_id": "üÜî <b>ID —Å—Ç–∏–∫–µ—Ä–∞:</b> <code>{}</code>",
        "help": "üìå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.stickspam <ID_—Å—Ç–∏–∫–µ—Ä–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–∏–Ω—Ç–µ—Ä–≤–∞–ª></code>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{}</code>"
    }

    def __init__(self):
        self.spamming = False

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            await client(JoinChannelRequest("@psyhomodules"))
        except:
            pass


    @loader.command(ru_doc="üöÄ –ù–∞—á–∞—Ç—å —Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏")
    async def stickspam(self, message: Message):
        args = utils.get_args_raw(message).split()

        if len(args) != 3:
            return await utils.answer(message, self.strings["help"])

        try:
            sticker_id, count, interval = args[0], int(args[1]), float(args[2])

            if not 1 <= count <= 1000:
                return await utils.answer(message, self.strings["invalid_count"])

            if interval <= 0:
                return await utils.answer(message, self.strings["invalid_interval"])

            self.spamming = True
            await utils.answer(message, self.strings["spam_started"].format(sticker_id))

            for _ in range(count):
                if not self.spamming:
                    break
                await self._client.send_file(message.chat_id, sticker_id, silent=True)
                await asyncio.sleep(interval)

        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
        finally:
            self.spamming = False

    @loader.command(ru_doc="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
    async def stopspam(self, message: Message):
        self.spamming = False
        await utils.answer(message, self.strings["spam_stopped"])

    @loader.command(ru_doc="üîç –ü–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∏–∫–µ—Ä–∞")
    async def idstick(self, message: Message):
        reply = await message.get_reply_message()

        if not reply or not reply.sticker:
            return await utils.answer(message, "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä!</b>")

        sticker_id = reply.file.id
        await utils.answer(message, self.strings["sticker_id"].format(sticker_id))