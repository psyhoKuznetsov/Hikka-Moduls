__version__ = (1, 1, 1)
# meta developer: @psyhomodules


from .. import loader, utils
import asyncio
import os
import tempfile
import speech_recognition as sr
from telethon.tl.functions.channels import JoinChannelRequest

@loader.tds
class SpeechToText(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≥—Å –∏–ª–∏ –∫—Ä—É–∂–µ–∫ –≤ —Ç–µ–∫—Å—Ç"""

    strings = {
        "name": "SpeechToText",
        "processing": "üîÆ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞...</b>",
        "no_reply": "üö´ <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ!</b>",
        "result": "üìú <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n{}",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>",
        "downloading": "‚è≥ <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...</b>",
        "converting": "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...</b>",
        "recognizing": "üéØ <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...</b>",
        "current_lang": "üåê <b>–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:</b> <code>{}</code>",
        "lang_set": "üåê <b>–Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> <code>{}</code>",
        "lang_help": (
            "üåê <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</b>\n"
  
          "en-US (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π), ru-RU (—Ä—É—Å—Å–∫–∏–π), fr-FR (—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π),\n"
            "de-DE (–Ω–µ–º–µ—Ü–∫–∏–π), zh-CN (–∫–∏—Ç–∞–π—Å–∫–∏–π), ja-JP (—è–ø–æ–Ω—Å–∫–∏–π),\n"
            "es-ES (–∏—Å–ø–∞–Ω—Å–∫–∏–π)\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>.stxtcfg [–∫–æ–¥ —è–∑—ã–∫–∞]</code>"
        )
    }

    def __init__(self):
        self.name = self.strings["name"]
        self.recognizer = sr.Recognizer()
        self.config = loader.ModuleConfig(
            "language", "ru-RU", "–Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            await client(JoinChannelRequest("@psyhomodules"))
        except:
            pass


    async def convert_to_wav(self, input_file, output_file):
        try:
            cmd = [
                'ffmpeg', '-y', '-i', input_file, 
                '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000', 
                output_file
            ]
            process = await asyncio.create_subprocess_exec(
                *cmd, 
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            await process.communicate()
            return True
        except Exception:
            return False

    async def recognize_audio(self, file_path, language):
        try:
            return await asyncio.to_thread(self._perform_recognition, file_path, language)
        except Exception:
            return None

    def _perform_recognition(self, file_path, language):
        with sr.AudioFile(file_path) as source:
            audio_data = self.recognizer.record(source)
            return self.recognizer.recognize_google(audio_data, language=language)

    @loader.command()
    async def atxt(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å .atxt [–∫–æ–¥ —è–∑—ã–∫–∞]"""
        args = utils.get_args_raw(message)
        language = args.strip() if args else self.config["language"]
        
        reply = await message.get_reply_message()
        
        if not reply or not reply.media:
            return await utils.answer(message, self.strings["no_reply"])
            
        msg = await utils.answer(message, self.strings["processing"])
        
        temp_original = tempfile.NamedTemporaryFile(suffix=".ogg", delete=False).name
        temp_wav = tempfile.NamedTemporaryFile(suffix=".wav", delete=False).name
        
        try:
            await utils.answer(msg, self.strings["downloading"])
            await reply.download_media(temp_original)
            
            await utils.answer(msg, self.strings["converting"])
            if not await self.convert_to_wav(temp_original, temp_wav):
                return await utils.answer(msg, self.strings["error"])
            
            await utils.answer(msg, self.strings["recognizing"])
            text = await self.recognize_audio(temp_wav, language)
            
            if text:
                await utils.answer(msg, self.strings["result"].format(text))
            else:
                await utils.answer(msg, self.strings["error"])
                
        except Exception:
            await utils.answer(msg, self.strings["error"])
        finally:
            for temp_file in [temp_original, temp_wav]:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)

    @loader.command()
    async def stxtcfg(self, message):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: .stxtcfg [–∫–æ–¥ —è–∑—ã–∫–∞]"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(
                message, 
                self.strings["current_lang"].format(self.config["language"]) + "\n\n" + self.strings["lang_help"]
            )
        
        self.config["language"] = args.strip()
        await utils.answer(
            message, self.strings["lang_set"].format(self.config["language"])
        )