
__version__ = (1, 0, 0)
# meta developer: @psyhomodules

from .. import loader, utils
from telethon import types
from telethon.tl.functions.channels import JoinChannelRequest
import datetime
import re
import logging

logger = logging.getLogger(__name__)

@loader.tds
class –î–∞—Ç–∞–ó–∞—á–∞—Ç–∏—èMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–π –¥–∞—Ç—ã –∑–∞—á–∞—Ç–∏—è –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    
    strings = {
        "name": "–î–∞—Ç–∞–ó–∞—á–∞—Ç–∏—è",
        "no_args": "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b> <code>.–∑–∞—á–∞–ª–∏ [–≥–æ–¥] [–º–µ—Å—è—Ü] [–¥–µ–Ω—å]</code>",
        "invalid_date": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>.–∑–∞—á–∞–ª–∏ [–≥–æ–¥] [–º–µ—Å—è—Ü] [–¥–µ–Ω—å]</code>",
        "date_error": "‚ùå <b>–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã</b>",
        "result": "üîç <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∑–∞—á–∞—Ç–∏—è:</b> <code>{}</code>",
        "future_date": "‚ùå <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!</b>"
    }
    
    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            await client(JoinChannelRequest("@psyhomodules"))
        except:
            pass
    
    def validate_date(self, year, month, day):
        try:
            date = datetime.date(year, month, day)

            if date > datetime.date.today():
                return False, "future"
            return True, date
        except ValueError:
            return False, "invalid"
    
    @loader.command(ru_doc="–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∑–∞—á–∞—Ç–∏—è: .–∑–∞—á–∞–ª–∏ [–≥–æ–¥] [–º–µ—Å—è—Ü] [–¥–µ–Ω—å]")
    async def –∑–∞—á–∞–ª–∏cmd(self, message: types.Message):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É –∑–∞—á–∞—Ç–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É: .–∑–∞—á–∞–ª–∏ [–≥–æ–¥] [–º–µ—Å—è—Ü] [–¥–µ–Ω—å]"""
        
        args = utils.get_args(message)
        
        if not args or len(args) != 3:
            await utils.answer(message, self.strings["no_args"])
            return
        
        try:
            year = int(args[0].strip())
            month = int(args[1].strip())
            day = int(args[2].strip())
            
            valid, result = self.validate_date(year, month, day)
            if not valid:
                if result == "future":
                    await utils.answer(message, self.strings["future_date"])
                else:
                    await utils.answer(message, self.strings["invalid_date"])
                return
            
            birth_date = result
            
            pregnancy_duration = datetime.timedelta(days=266)
            
            conception_date = birth_date - pregnancy_duration
            
            formatted_date = conception_date.strftime("%d.%m.%Y")
            
            await utils.answer(message, self.strings["result"].format(formatted_date))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ –î–∞—Ç–∞–ó–∞—á–∞—Ç–∏—è: {e}")
            await utils.answer(message, self.strings["date_error"])
            return