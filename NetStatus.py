__version__ = (1, 0, 0)
# meta developer: @psyho_Kuznetsov

from .. import loader, utils
import asyncio
from telethon import functions, types

@loader.tds
class NetStatusM(loader.Module):
    """üåê –ú–æ–¥—É–ª—å –¥–ª—è 24/7 —Å—Ç–∞—Ç—É—Å–∞ '–≤ —Å–µ—Ç–∏'"""
    
    strings = {
        "name": "NetStatus",
        "on": "‚úÖ <b>–°—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏' –≤–∫–ª—é—á—ë–Ω!</b>",
        "off": "‚ùå <b>–°—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏' –≤—ã–∫–ª—é—á—ë–Ω!</b>",
        "already_on": "‚ö†Ô∏è <i>–°—Ç–∞—Ç—É—Å —É–∂–µ –≤–∫–ª—é—á—ë–Ω.</i>",
        "already_off": "‚ö†Ô∏è <i>–°—Ç–∞—Ç—É—Å —É–∂–µ –≤—ã–∫–ª—é—á—ë–Ω.</i>",
        "running": "üîÑ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å '–≤ —Å–µ—Ç–∏'...</b>",
        "status": "üìä <b>–°—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏':</b> {}"
    }

    strings_ru = {
        "name": "NetStatus",
        "on": "‚úÖ <b>–°—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏' –≤–∫–ª—é—á—ë–Ω!</b>",
        "off": "‚ùå <b>–°—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏' –≤—ã–∫–ª—é—á—ë–Ω!</b>",
        "already_on": "‚ö†Ô∏è <i>–°—Ç–∞—Ç—É—Å —É–∂–µ –≤–∫–ª—é—á—ë–Ω.</i>",
        "already_off": "‚ö†Ô∏è <i>–°—Ç–∞—Ç—É—Å —É–∂–µ –≤—ã–∫–ª—é—á—ë–Ω.</i>",
        "running": "üîÑ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å '–≤ —Å–µ—Ç–∏'...</b>",
        "status": "üìä <b>–°—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏':</b> {}",
        "_cmd_doc_neton": "üü¢ –í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏'",
        "_cmd_doc_netoff": "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏'",
        "_cmd_doc_netstatus": "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞",
        "_cls_doc": "üåê –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–º '–≤ —Å–µ—Ç–∏' –≤ Telegram"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self._db_name = "NetStatusMod"
        self.is_running = self.get("is_running", False)
        self._task = None
        
        if self.is_running:
            asyncio.ensure_future(self._keep_online())

    def get(self, key, default=None):
        return self.db.get(self._db_name, key, default)
    
    def set(self, key, value):
        self.db.set(self._db_name, key, value)

    async def netoncmd(self, message):
        """üü¢ –í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏'"""
        if self.is_running:
            return await utils.answer(message, self.strings["already_on"])
        
        self.is_running = True
        self.set("is_running", True)
        
        try:
            await self.client(functions.account.UpdateStatusRequest(offline=False))
            asyncio.ensure_future(self._keep_online())
            return await utils.answer(message, self.strings["on"])
        except Exception as e:
            self.is_running = False
            self.set("is_running", False)
            return await utils.answer(message, f"‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{e}</code>")

    async def netoffcmd(self, message):
        """üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Å–µ—Ç–∏'"""
        if not self.is_running:
            return await utils.answer(message, self.strings["already_off"])
        
        self.is_running = False
        self.set("is_running", False)
        
        try:
            if self._task and not self._task.done():
                self._task.cancel()
                
            await self.client(functions.account.UpdateStatusRequest(offline=True))
            return await utils.answer(message, self.strings["off"])
        except Exception as e:
            return await utils.answer(message, f"‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{e}</code>")

    async def netstatuscmd(self, message):
        """‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        status = "üü¢ –í–∫–ª—é—á–µ–Ω" if self.is_running else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, self.strings["status"].format(status))

    async def _keep_online(self):
        self._task = asyncio.current_task()
        
        try:
            while self.is_running:
                try:
                    await self.client(functions.account.UpdateStatusRequest(offline=False))
                except Exception as e:
                    pass
                
                await asyncio.sleep(5)  
        except asyncio.CancelledError:
            pass
        except Exception as e:
            self.is_running = False
            self.set("is_running", False)