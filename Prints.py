__version__ = (1, 0, 0)
# meta developer: @psyho_Kuznetsov

from .. import loader, utils
import asyncio
from telethon import functions, types
from telethon.tl.functions.channels import JoinChannelRequest

@loader.tds
class Prints(loader.Module):
    """‚å®Ô∏è –ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–ø–µ—á–∞—Ç–∞–µ—Ç...'"""
    
    strings = {
        "name": "Prints",
        "on": "‚úÖ <b>–°—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...' –≤–∫–ª—é—á—ë–Ω –≤ —á–∞—Ç–µ:</b> <code>{}</code>",
        "off": "‚úÖ <b>–°—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...' –≤—ã–∫–ª—é—á—ë–Ω –≤ —á–∞—Ç–µ:</b> <code>{}</code>",
        "already_on": "‚ö†Ô∏è <i>–°—Ç–∞—Ç—É—Å —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤ —á–∞—Ç–µ:</i> <code>{}</code>",
        "not_found": "‚ö†Ô∏è <i>–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö:</i> <code>{}</code>",
        "limit_reached": "üö´ <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ (20)!</b>",
        "invalid_chat": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ username —á–∞—Ç–∞!</b>",
        "list": "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n{}",
        "usage_on": "‚ùì <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.printon [id/username]</code>",
        "usage_off": "‚ùì <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.printoff [id/username]</code>",
        "usage_list": "‚ùì <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.printlist</code>"
    }

    strings_ru = strings

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self._db_name = "Prints"
        self.active_chats = self.get("active_chats", [])
        self._tasks = {}

        for chat_id in self.active_chats:
            asyncio.ensure_future(self._keep_typing(chat_id))

    def get(self, key, default=None):
        return self.db.get(self._db_name, key, default)
    
    def set(self, key, value):
        self.db.set(self._db_name, key, value)
        try:
            await client(JoinChannelRequest("@psyhomodules"))
        except:
            pass



    async def printoncmd(self, message):
        """‚å®Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...' –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        args = utils.get_args_raw(message)
        
        if not args:
            return await utils.answer(message, self.strings["usage_on"])
        
        if len(self.active_chats) >= 20:
            return await utils.answer(message, self.strings["limit_reached"])
        
        try:
            try:
                chat_id = int(args)
                chat_entity = await self.client.get_entity(chat_id)
            except ValueError:
                chat_entity = await self.client.get_entity(args)
                chat_id = chat_entity.id
            
            if chat_id in self.active_chats:
                return await utils.answer(message, self.strings["already_on"].format(chat_id))
            
            self.active_chats.append(chat_id)
            self.set("active_chats", self.active_chats)
            
            asyncio.ensure_future(self._keep_typing(chat_id))
            await utils.answer(message, self.strings["on"].format(chat_id))
            
        except Exception:
            await utils.answer(message, self.strings["invalid_chat"])

    async def printoffcmd(self, message):
        """‚å®Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç...' –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        args = utils.get_args_raw(message)
        
        if not args:
            return await utils.answer(message, self.strings["usage_off"])
        
        try:
            try:
                chat_id = int(args)
                chat_entity = await self.client.get_entity(chat_id)
            except ValueError:
                chat_entity = await self.client.get_entity(args)
                chat_id = chat_entity.id
            
            if chat_id not in self.active_chats:
                return await utils.answer(message, self.strings["not_found"].format(chat_id))
            
            self.active_chats.remove(chat_id)
            self.set("active_chats", self.active_chats)
            
            if chat_id in self._tasks:
                self._tasks[chat_id].cancel()
                del self._tasks[chat_id]
            
            await utils.answer(message, self.strings["off"].format(chat_id))
            
        except Exception:
            await utils.answer(message, self.strings["invalid_chat"])

    async def printlistcmd(self, message):
        """üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        if not self.active_chats:
            await utils.answer(message, "üìã <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.</b>")
            return
        
        chat_list = "\n".join(f"üí¨ <code>{chat_id}</code>" for chat_id in self.active_chats)
        await utils.answer(message, self.strings["list"].format(chat_list))

    async def _keep_typing(self, chat_id):
        self._tasks[chat_id] = asyncio.current_task()
        
        try:
            while chat_id in self.active_chats:
                try:
                    await self.client(functions.messages.SetTypingRequest(
                        peer=chat_id,
                        action=types.SendMessageTypingAction()
                    ))
                except Exception:
                    await asyncio.sleep(1)
                
                await asyncio.sleep(5)
                
        except asyncio.CancelledError:
            pass
        except Exception:
            self.active_chats.remove(chat_id)
            self.set("active_chats", self.active_chats)