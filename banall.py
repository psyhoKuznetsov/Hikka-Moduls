__version__ = (1, 0, 0)
# meta developer: @psyhomodules

import logging
import asyncio
import time
from hikkatl.types import Message
from hikkatl.tl.functions.channels import GetParticipantsRequest, EditBannedRequest
from hikkatl.tl.types import (
    ChannelParticipantsSearch,
    ChatBannedRights,
    PeerChannel,
    ChannelParticipantAdmin,
    ChannelParticipantCreator,
    ChannelParticipantBanned,
    InputPeerChannel,
)
from hikkatl.errors import FloodWaitError
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class BanAllModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –±–æ—Ç–æ–≤."""
    
    strings = {
        "name": "BanAllModule",
        "no_channel_id": "<b>‚ùå –û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞.",
        "getting_channel_error": "<b>‚ùå –û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: <code>{}</code>",
        "no_admin_rights": "<b>‚ùå –û—à–∏–±–∫–∞:</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        "process_started": "<b>üöÄ BanAll:</b> <i>–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</i>",
        "process_complete": "<b>‚úÖ BanAll –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{}</code>\n‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: <code>{}</code>\n‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∞–¥–º–∏–Ω—ã/–±–æ—Ç—ã): <code>{}</code>\n‚Ä¢ –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: <code>{}</code>",
        "processing_status": "<b>‚öôÔ∏è BanAll –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:</b>\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{}</code>\n‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: <code>{}</code>\n‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: <code>{} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–º–∏–Ω</code>",
        "general_error": "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{}</code>",
        "flood_wait": "<b>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–ª—É–¥-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.</b> –û–∂–∏–¥–∞–Ω–∏–µ <code>{}</code> —Å–µ–∫—É–Ω–¥...",
        "invalid_channel_id": "<b>‚ùå –û—à–∏–±–∫–∞:</b> ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
    }

    def __init__(self):
        self.running = False

     async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.owner
    async def banallcmd(self, message: Message):
        """[ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞] - –ë–∞–Ω –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ"""
        if self.running:
            await message.edit("<b>‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!</b> –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
            
        try:
            self.running = True
            start_time = time.time()
            
            args = utils.get_args_raw(message)
            if not args:
                await message.edit(self.strings["no_channel_id"])
                self.running = False
                return

            try:
                chat_id = int(args)
            except ValueError:
                await message.edit(self.strings["invalid_channel_id"])
                self.running = False
                return
            
            try:
                chat = await self.client.get_entity(PeerChannel(chat_id))
            except Exception as e:
                await message.edit(self.strings["getting_channel_error"].format(str(e)))
                self.running = False
                return

            try:
                admin_participants = await self.client(GetParticipantsRequest(
                    channel=InputPeerChannel(chat.id, chat.access_hash),
                    filter=None,
                    offset=0,
                    limit=100,
                    hash=0
                ))
                
                current_user_id = (await self.client.get_me()).id
                is_admin = False
                can_ban = False
                
                for participant in admin_participants.participants:
                    if hasattr(participant, 'user_id') and participant.user_id == current_user_id:
                        if isinstance(participant, ChannelParticipantAdmin):
                            is_admin = True
                            if hasattr(participant, 'admin_rights') and hasattr(participant.admin_rights, 'ban_users'):
                                can_ban = participant.admin_rights.ban_users
                        elif isinstance(participant, ChannelParticipantCreator):
                            is_admin = True
                            can_ban = True
                        break
                
                if not is_admin or not can_ban:
                    await message.edit(self.strings["no_admin_rights"])
                    self.running = False
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
 
            banned_rights = ChatBannedRights(
                until_date=None,
                view_messages=True,
                send_messages=True,
                send_media=True,
                send_stickers=True,
                send_gifs=True,
                send_games=True,
                send_inline=True,
                embed_links=True,
            )

            await message.edit(self.strings["process_started"])

            offset = 0
            limit = 100 
            banned_count = 0
            total_users = 0
            status_update_counter = 0
            last_update_time = time.time()
            processed_since_last_update = 0


            while True:
                try:
                    participants = await self.client(GetParticipantsRequest(
                        channel=InputPeerChannel(chat.id, chat.access_hash),
                        filter=ChannelParticipantsSearch(""),
                        offset=offset,
                        limit=limit,
                        hash=0
                    ))
                    
                    if not participants.users:
                        break

                    batch_size = len(participants.users)
                    total_users += batch_size
                    processed_since_last_update += batch_size

                    participant_dict = {p.user_id: p for p in participants.participants}

                    for user in participants.users:
                        user_id = user.id
                        participant = participant_dict.get(user_id)

                        is_admin = isinstance(participant, (ChannelParticipantAdmin, ChannelParticipantCreator))
                        is_banned = isinstance(participant, ChannelParticipantBanned)

                        if not user.bot and not is_admin and not is_banned:
                            try:
                                await self.client(EditBannedRequest(
                                    channel=InputPeerChannel(chat.id, chat.access_hash),
                                    participant=user_id,
                                    banned_rights=banned_rights
                                ))
                                banned_count += 1
                                
                                
                                username = getattr(user, 'username', None)
                                username_str = f"@{username}" if username else "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
                                first_name = getattr(user, 'first_name', "")
                                last_name = getattr(user, 'last_name', "")
                                full_name = f"{first_name} {last_name}".strip()
                                
                                logger.info(f"–ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username_str}) - {full_name}")
                                
                                await asyncio.sleep(0.3)
                            except FloodWaitError as flood_error:
                                wait_time = flood_error.seconds
                                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–ª—É–¥-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥")
                                await message.edit(self.strings["flood_wait"].format(wait_time))
                                await asyncio.sleep(wait_time)
                            except Exception as ban_error:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(ban_error)}")
                                continue
                        
                        status_update_counter += 1
                        if status_update_counter >= 20:
                            current_time = time.time()
                            time_diff = current_time - last_update_time
                            
                           
                            if time_diff > 0:
                                speed = int((processed_since_last_update / time_diff) * 60)
                            else:
                                speed = 0
                            
                            try:
                                await message.edit(self.strings["processing_status"].format(
                                    total_users, 
                                    banned_count,
                                    speed
                                ))
                                status_update_counter = 0
                                last_update_time = current_time
                                processed_since_last_update = 0
                            except Exception as edit_error:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(edit_error)}")

                    offset += limit
                    
                    await asyncio.sleep(1.5)
                
                except FloodWaitError as flood_error:
                    wait_time = flood_error.seconds
                    logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–ª—É–¥-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥")
                    await message.edit(self.strings["flood_wait"].format(wait_time))
                    await asyncio.sleep(wait_time)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
                    break

            elapsed_time = time.time() - start_time
            hours, remainder = divmod(int(elapsed_time), 3600)
            minutes, seconds = divmod(remainder, 60)
            time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
            
            result_message = self.strings["process_complete"].format(
                total_users, banned_count, total_users - banned_count, time_str
            )
            
            await message.edit(result_message)

        except Exception as e:
            error_message = self.strings["general_error"].format(str(e))
            logger.error(error_message)
            await message.edit(error_message)
        finally:
            self.running = False
            
    @loader.owner
    async def banallstopcmd(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –±–∞–Ω–∞"""
        if not self.running:
            await message.edit("<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–∞–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.</b>")
            return
            
        self.running = False
        await message.edit("<b>üõë –û–ø–µ—Ä–∞—Ü–∏—è –±–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</b>")
