__version__ = (1, 0, 0)
# meta developer: @psyhomodules

from hikkatl.types import Message
from .. import loader, utils
import subprocess
import logging
import os
import sys
from typing import Optional
from telethon.tl.functions.channels import JoinChannelRequest

logger = logging.getLogger(__name__)

@loader.tds
class BotHostMod(loader.Module):
    """ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã"""

    strings = {
        "name": "BotHost",
        "no_file": "üö´ <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª —Å –±–æ—Ç–æ–º</b>",
        "invalid_file": "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ù—É–∂–µ–Ω .py —Ñ–∞–π–ª</b>",
        "bot_started": "‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\nüìù –õ–æ–≥–∏:\n<code>{}</code>",
        "bot_stopped": "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
        "bot_error": "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:</b>\n<code>{}</code>",
        "already_running": "‚ö†Ô∏è <b>–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω</b>",
        "not_running": "‚ö†Ô∏è <b>–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω</b>",
        "status": "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> {}\nüìå PID: {}"
    }

    def __init__(self):
        self.bot_process: Optional[subprocess.Popen] = None
        self.bot_file: Optional[str] = None
        self.config = loader.ModuleConfig(
            "log_lines", 5,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        try:
            await client(JoinChannelRequest("@psyhomodules"))
        except:
            pass

    @loader.command(ru_doc="–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–∞–π–ª)")
    async def boton(self, message: Message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .boton (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–∞–π–ª)"""
        if self.bot_process and self.bot_process.poll() is None:
            await utils.answer(message, self.strings["already_running"])
            return

        reply = await message.get_reply_message()
        if not reply or not reply.file:
            await utils.answer(message, self.strings["no_file"])
            return

        if not reply.file.name.endswith('.py'):
            await utils.answer(message, self.strings["invalid_file"])
            return

        try:
            file_path = await reply.download_media()
            self.bot_file = file_path

            self.bot_process = subprocess.Popen(
                [sys.executable, file_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            logs = []
            for _ in range(self.config["log_lines"]):
                if self.bot_process.stdout.readable():
                    line = self.bot_process.stdout.readline()
                    if line:
                        logs.append(line.strip())

            if self.bot_process.poll() is None:
                await utils.answer(
                    message,
                    self.strings["bot_started"].format(
                        "\n".join(logs) if logs else "üïê –û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤..."
                    )
                )
            else:
                error = self.bot_process.stderr.read()
                await utils.answer(
                    message,
                    self.strings["bot_error"].format(error or "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                )
                self.bot_process = None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await utils.answer(
                message, 
                self.strings["bot_error"].format(str(e))
            )
            if self.bot_process:
                self.bot_process.kill()
                self.bot_process = None

    @loader.command(ru_doc="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞")
    async def botoff(self, message: Message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .botoff"""
        if not self.bot_process or self.bot_process.poll() is not None:
            await utils.answer(message, self.strings["not_running"])
            return

        try:
            self.bot_process.kill()
            self.bot_process = None
            if self.bot_file and os.path.exists(self.bot_file):
                os.remove(self.bot_file)
                self.bot_file = None
            await utils.answer(message, self.strings["bot_stopped"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            await utils.answer(
                message, 
                self.strings["bot_error"].format(str(e))
            )

    @loader.command(ru_doc="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    async def botstatus(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .botstatus"""
        if not self.bot_process:
            status = "üî¥ –ù–µ –∑–∞–ø—É—â–µ–Ω"
            pid = "N/A"
        elif self.bot_process.poll() is None:
            status = "üü¢ –ó–∞–ø—É—â–µ–Ω"
            pid = self.bot_process.pid
        else:
            status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            pid = "N/A"

        await utils.answer(
            message,
            self.strings["status"].format(status, pid)
        )