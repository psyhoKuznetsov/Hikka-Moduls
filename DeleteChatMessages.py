__version__ = (1, 0, 0)
# meta developer: @psyhomodules

import logging
from datetime import datetime
from typing import Optional
from telethon.tl.types import Message, PeerChannel
from telethon.errors import ChatIdInvalidError
from telethon.tl.functions.channels import JoinChannelRequest
from .. import loader, utils
import asyncio

@loader.tds
class DeleteChatMessagesModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    
    strings = {
        "name": "DeleteMessages",
        "description": "–ú–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.",
        "deleting": "<b>üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... ({count} –Ω–∞–π–¥–µ–Ω–æ)</b>",
        "deleted": "<b>‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π!</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞:</b> {error}",
        "no_messages": "<b>‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
        "no_access": "<b>‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É</b>"
    }

    def __init__(self):
        self._client = None
        self._db = None
        self._me = None
        self._batch_size = 100

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        seif._me = await client.get_me()
        try:
            await client(JoinChannelRequest("@psyhomodules"))
        except:
            pass

    async def _delete_batch(self, chat, messages: list) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–∫–µ—Ç–∞–º–∏"""
        try:
            await self._client.delete_messages(
                entity=chat,
                message_ids=[msg.id for msg in messages],
                revoke=True
            )
            return len(messages)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
            return 0

    async def delchatmecmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>.delchatme [ID —á–∞—Ç–∞]</code>
        –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""
        
        args = utils.get_args_raw(message)
        chat = await self._resolve_chat(args, message)
        if chat is None:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        status_msg = await self._client.send_message(
            message.chat_id,
            self.strings["deleting"].format(count=0)
        )

        try:
            messages = []
            total_count = 0

            async for msg in self._client.iter_messages(
                chat,
                from_user=self._me.id,
                reverse=True,
                limit=None
            ):
                messages.append(msg)
                total_count += 1
                
                if total_count % 50 == 0:
                    try:
                        await status_msg.edit(self.strings["deleting"].format(count=total_count))
                    except Exception:
                        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await status_msg.delete()
                        status_msg = await self._client.send_message(
                            message.chat_id,
                            self.strings["deleting"].format(count=total_count)
                        )
                
                if len(messages) >= self._batch_size:
                    deleted = await self._delete_batch(chat, messages)
                    total_count -= (len(messages) - deleted)
                    messages.clear()

            if messages:
                deleted = await self._delete_batch(chat, messages)
                total_count -= (len(messages) - deleted)

            final_text = (self.strings["deleted"].format(count=total_count) 
                         if total_count > 0 else self.strings["no_messages"])
            try:
                await status_msg.edit(final_text)
            except Exception:
                await status_msg.delete()
                await self._client.send_message(message.chat_id, final_text)
            
            await asyncio.sleep(2)
            await status_msg.delete()

        except ChatIdInvalidError:
            await self._client.send_message(
                message.chat_id,
                self.strings["error"].format(error="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID —á–∞—Ç–∞")
            )
        except Exception as e:
            error_text = self.strings["error"].format(error=str(e))
            try:
                await status_msg.edit(error_text)
            except Exception:
                await status_msg.delete()
                await self._client.send_message(message.chat_id, error_text)
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ delchatmecmd: {str(e)}")
        finally:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                await status_msg.delete()
            except Exception:
                pass

    async def _resolve_chat(self, args: str, message: Message) -> Optional[any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —á–∞—Ç–∞ –ø–æ ID –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
        try:
            if not args:
                return message.chat_id
            
            chat_id = int(args)
            if chat_id < 0:
                if chat_id <= -1000000000000:
                    chat_id = -1000000000000 + (chat_id % 1000000000000)
                chat = await self._client.get_entity(PeerChannel(chat_id))
            else:
                chat = await self._client.get_entity(chat_id)
            
            return chat
        except ValueError:
            await self._client.send_message(
                message.chat_id,
                self.strings["error"].format(error="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
            )
        except Exception as e:
            if "access" in str(e).lower():
                await self._client.send_message(message.chat_id, self.strings["no_access"])
            else:
                await self._client.send_message(
                    message.chat_id,
                    self.strings["error"].format(error="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                )
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}")
        return None